import re
import sys
import os

def arg_filename():
    arg_num = len(sys.argv)

    if arg_num < 2:
        print(' -- to few arguments: you must specify vhdl file')
        return None

    vhdl_file = sys.argv[1]

    if(os.path.exists(vhdl_file)):
        return vhdl_file
    else:
        print('file dont exists')
        return None
        
def find_entity_code(vhdl_file):
    fd = open(vhdl_file,'r')
    vhdl = fd.read();

    entityre = re.compile(r'\bentity\s+(\w+)[\s\w\W]*end\s+\1;', re.I)
    matches = entityre.finditer(vhdl)

    entity_code = ''
    entity_name = ''

    try:
        match = next(matches)
        entity_code = match.group(0)
        entity_name = match.group(1)
    except:
        print('  -- entity not find in code')
        return None;
    finally:
        fd.close()

    return entity_code, entity_name

def find_generic(entity):
    ge_re = re.compile(r'(\w+) \s*:\s* ([\w]*\s?(?:\(.*\))?) \s*:=\s* ( \(\s?others\s?=>\s?\'[01]*\'\) | \w?"[0-9a-fA-F]*" | \'[01]*\' | [0-9]* |) \s*;?', re.VERBOSE)
    generics = ge_re.finditer(entity)

    generic_list = []
    for generic in generics:

        generic_list.append({
            "name": generic.group(1),
            "type": generic.group(2),
            "value": generic.group(3)
        });

    return generic_list

def find_ports(entity):
    # po_re = re.compile(r'(\w+) \s*:\s* (in|out|inout)\s+ ([\w]*\(?[\s\w\d\+\-\*\\]*\)?) \s*;?', re.VERBOSE)
    po_re = re.compile(r'(\w+) \s*:\s* (in|out|inout)\s+ ([\w]*\s?(\(.*\))?) \s*;?', re.VERBOSE | re.MULTILINE)
    ports = po_re.finditer(entity)

    port_list = []
    for port in ports:

        port_list.append({
            "name": port.group(1).lower(),
            "polarity": port.group(2),
            "type": port.group(3),
        });

    return port_list

def generate_tb(entity_name, generics, ports):
    tb_str = [];

    tb_str.append('\r\n-- generated by script --\r\n')
    tb_str.append('\r\n')

    tb_str.append('library ieee;\r\n')
    tb_str.append('use ieee.std_logic_1164.all;\r\n')
    tb_str.append('use ieee.std_logic_unsigned.all;\r\n')
    tb_str.append('use ieee.numeric_std.all;\r\n\r\n\r\n')

    tb_str.append(f'entity {entity_name}_tb is\r\nend {entity_name}_tb;\r\n\r\n')
    tb_str.append(f'architecture test_bench of {entity_name}_tb is\r\n\r\n')
    tb_str.append(generate_component(entity_name, generics, ports))
    tb_str.append(generate_signals(ports,generics))
    tb_str.append(f'begin\r\n\r\n')
    tb_str.append(generate_uut(entity_name, generics, ports))
    tb_str.append(generate_proc(ports))
    tb_str.append(f'end test_bench;\r\n')

    return ''.join(tb_str)
    
def generate_component(entity_name, generics, ports):
    comp_str = []
    comp_str.append(f'component {entity_name} is\r\n')

    generics_num = len(generics)
    ports_num = len(ports)
    
    if generics_num > 0:
        comp_str.append('generic (\r\n')

        for i in range(generics_num):
            gnrc = generics[i]
            line_end = ';'

            if i == generics_num - 1:
                line_end = ''

            comp_str.append(f'{gnrc["name"]}: {gnrc["type"]} := {gnrc["value"]}{line_end}\r\n')
        
        comp_str.append(');\r\n')

    if ports_num > 0:
        comp_str.append('port (\r\n')

        for i in range(ports_num):
            port = ports[i]
            line_end = ';'

            if i == ports_num - 1:
                line_end = ''

            comp_str.append(f'{port["name"]}: {port["polarity"]} {port["type"]}{line_end}\r\n')
        
        comp_str.append(');\r\n')


    comp_str.append(f'end component {entity_name};\r\n\r\n')
    
    return ''.join(comp_str)

def generate_signals(ports,generics):
    sig_str = []

    for generic in generics:
        sig_str.append(f'constant {generic["name"]}: {generic["type"]} := {generic["value"]};\r\n')

    sig_str.append('constant period: time := 10ns;\r\n\r\n')

    vec = re.compile(r'vector')
    for port in ports:

        zero_val = '\'0\''
        if vec.search(port["type"]) != None:
            zero_val = '(others => \'0\')'

        sig_str.append(f'signal {port["name"]}: {port["type"]} := {zero_val};\r\n')

    sig_str.append('\r\n')
    return ''.join(sig_str)            

def generate_uut(entity_name, generics, ports):
    uut_str = []

    uut_str.append(f'uut: {entity_name}\r\n')
    
    generics_num = len(generics)

    if generics_num > 0:
        uut_str.append('generic map(\r\n')
        
        for i in range(generics_num):
            
            gnrc = generics[i]
            
            line_end = ','
            if i == generics_num - 1:
                line_end = ''

            uut_str.append(f'\t{gnrc["name"]} => {gnrc["value"]}{line_end}\r\n')

        uut_str.append(')\r\n')


    port_num = len(ports)
    if port_num > 0:
        uut_str.append('port map(\r\n')

        for i in range(port_num):
            port = ports[i]
            
            line_end = ','
            if i == port_num - 1:
                line_end = ''

            uut_str.append(f'\t{port["name"]} => {port["name"]}{line_end}\r\n')

        uut_str.append(');\r\n\r\n')

    return ''.join(uut_str)

def generate_proc(ports):
    proc_str = []

    clk = []
    rst = []

    clkre = re.compile(r'(clk|clock)', re.I)
    rstre = re.compile(r'(rst|reset)', re.I)

    for port in ports:

        if clkre.search(port["name"]) != None:
            clk.append(port)

        if rstre.search(port["name"]) != None:
            rst.append(port)

    if len(clk) > 0:
        proc_str.append('clock: process\r\n')
        proc_str.append('begin\r\n')
        proc_str.append(f'\t{clk[0]["name"]} <= \'0\';\r\n')
        proc_str.append(f'\twait for period/2;\r\n')
        proc_str.append(f'\t{clk[0]["name"]} <= \'1\';\r\n')
        proc_str.append(f'\twait for period/2;\r\n')
        proc_str.append(f'end process clock;\r\n\r\n')


    proc_str.append('test: process\r\n')
    proc_str.append('begin\r\n')

    proc_str.append(f'\twait for period;\r\n')

    if len(rst) > 0:
        proc_str.append(f'\t{rst[0]["name"]} <= \'0\';\r\n')
        proc_str.append(f'\twait for period;\r\n')
        proc_str.append(f'\t{rst[0]["name"]} <= \'1\';\r\n\r\n')

    proc_str.append(f'\twait for period;\r\n')
    proc_str.append(f'\tassert FALSE Report "Simulation Finished" severity FAILURE;\r\n\r\n')
    proc_str.append(f'end process test;\r\n\r\n')

    return ''.join(proc_str)


def main():
    
    filename = arg_filename()
    if filename == None:
        return
    
    entity_code, entity_name = find_entity_code(filename)
    if entity_code == None:
        return

    generics = find_generic(entity_code)
    ports = find_ports(entity_code)

    tb_content = generate_tb(entity_name, generics, ports)
    
    tbfd = open(f'{entity_name}_tb.vhd','w')
    tbfd.write(tb_content)
    tbfd.close()



if __name__ == "__main__":
    main()